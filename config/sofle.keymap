/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_move.dtsi>
#include <behaviors/mouse_scroll.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        BackDelMorph: BackDelMorph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKDELMORPH";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MomentStickyLayer: MomentStickyLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTSTICKYLAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };

        BackDelDance: BackDelDance {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKDELDANCE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            tapping-term-ms = <190>;
        };

        PasteCopyCutDance: PasteCopyCutDance {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTECOPYCUTDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LC(C)>, <&kp LC(X)>;

            tapping-term-ms = <220>;
        };
    };

    combos {
        compatible = "zmk,combos";

        PCCDance {
            bindings = <&PasteCopyCutDance>;
            key-positions = <27 26>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <45 46>;
            timeout-ms = <200>;
            layers = <0>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <27 28>;
            layers = <0 1>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <32 33>;
            layers = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp LEFT_GUI        &kp EXCL  &kp AT        &kp HASH   &kp DLLR                &kp PRCNT                                             &kp CARET      &kp AMPS         &kp KP_MULTIPLY               &kp LPAR    &kp RPAR       &kp BACKSLASH
&kp TAB             &kp Q     &kp W         &kp E      &kp R                   &kp T                                                 &kp Y          &kp U            &kp I                         &kp O       &kp P          &kp LEFT_BRACKET
&PasteCopyCutDance  &kp A     &kp S         &kp D      &kp F                   &kp G                                                 &kp H          &kp J            &kp K                         &kp L       &kp SEMICOLON  &kp SQT
&none               &kp Z     &kp X         &kp C      &kp V                   &kp B                 &kp C_MUTE    &kp C_PLAY_PAUSE  &kp N          &kp M            &kp COMMA                     &kp PERIOD  &kp SLASH      &kp RIGHT_BRACKET
                              &kp LEFT_ALT  &kp LCTRL  &MomentStickyLayer 1 1  &mt LEFT_SHIFT SPACE  &kp ESCAPE    &kp ENTER         &BackDelDance  &lt 2 RIGHT_ALT  &mt RIGHT_CONTROL LEFT_SHIFT  &tog 2
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        symbols {
            bindings = <
&kp TILDE       &kp F1      &kp F2     &kp F3      &kp F4       &kp F5                          &kp F6  &kp F7           &kp F8             &kp F9                 &kp F10           &kp F11
&caps_word      &kp N1      &kp N2     &kp N3      &kp N4       &kp N5                          &kp N6  &kp N7           &kp N8             &kp N9                 &kp N0            &kp BACKSLASH
&kp LEFT_SHIFT  &kp PLUS    &kp UNDER  &kp EQUAL   &kp MINUS    &kp GRAVE                       &kp AT  &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp LESS_THAN     &kp PIPE
&trans          &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp LEFT_GUI  &none     &none   &none   &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &none
                            &trans     &trans      &trans       &trans        &trans    &trans  &trans  &kp RIGHT_SHIFT  &trans             &trans
            >;
        };

        movement {
            bindings = <
&bootloader       &none           &none           &none         &none            &none                                   &none   &none     &none           &none         &none            &bootloader
&none             &none           &mkp MCLK       &mkp RCLK     &mkp LCLK        &none                                   &none   &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &none
&kp LEFT_SHIFT    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none                                   &none   &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none
&kp LEFT_CONTROL  &kp LEFT_ALT    &none           &none         &none            &none   &out OUT_TOG    &bt BT_CLR_ALL  &none   &kp N0    &none           &none         &none            &none
                                  &trans          &trans        &to 0            &trans  &none           &trans          &trans  &trans    &trans          &trans
            >;
        };
    };
};

/ {
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
    };
};

&left_encoder { status = "okay"; };

&right_encoder { status = "okay"; };

&led_strip {
    chain-length = <72>;    // Укажите общее количество светодиодов
};

/ {
    chosen { zmk,underglow = &led_strip; };
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };
};

/ {
    widgets {
        layer_status: layer_status { compatible = "zmk,widget-layer-status"; };

        battery_status: battery_status { compatible = "zmk,widget-battery-status"; };

        output_status: output_status { compatible = "zmk,widget-output-status"; };
    };
};

/ {
    chosen { zephyr,display = &oled; };
};
